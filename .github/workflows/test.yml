name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # test:
  #   name: Test in ${{ matrix.testMode }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       project-path:
  #         - ./
  #       testMode:
  #         - playmode
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         lfs: true
  #     - uses: actions/cache@v4
  #       with:
  #         path: ${{ matrix.project-path }}/Library
  #         key: Library-${{ matrix.project-path }}
  #         restore-keys: |
  #           Library-
  #     - uses: game-ci/unity-test-runner@v4
  #       id: tests
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         projectPath: ${{ matrix.project-path }}
  #         testMode: ${{ matrix.testMode }}
  #         artifactsPath: ${{ matrix.testMode }}-artifacts
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #         checkName: ${{ matrix.testMode }} Test Results
  #         coverageOptions: 'generateAdditionalMetrics;assemblyFilters:+MyGameDevTools.SceneLoading'
  #     - name: Upload Coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         name: PlayMode
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ${{ steps.tests.outputs.coveragePath }}/**/*.xml

  pre-release:
    name: Release
    runs-on: ubuntu-latest
    # needs: test
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Create .releaserc
      run: |
        echo '{
          "branches": [
            "main",
            {
              "name": "${{ github.head_ref }}",
              "prerelease": true
            }
          ],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            "@semantic-release/changelog",
            [
              "@semantic-release/npm",
              {
                "npmPublish": false,
                "pkgRoot": "$PKG_ROOT",
                "tarballDir": "dist"
              }
            ],
            [
            "@semantic-release/github",
              {
                "assets": "dist/*.tgz"
              }
            ],
          ],
          "tagFormat": "${version}"
        }' > .releaserc
        cat .releaserc
      env:
        PKG_ROOT: Packages/com.mygamedevtools.scene-loader
    - name: Release
      id: semantic
      run: |
        npm install -g @semantic-release/git @semantic-release/changelog
        npx semantic-release@24 --dry-run --debug
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
    - name: Output Release Version
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo "Pre-release version: ${{ steps.semantic.outputs.new_release_version }}"
