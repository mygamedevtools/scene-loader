name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project-path:
          - ./
        testMode:
          - playmode
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.project-path }}/Library
          key: Library-${{ matrix.project-path }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.project-path }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;assemblyFilters:+MyGameDevTools.SceneLoading'
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          name: PlayMode
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.tests.outputs.coveragePath }}/**/*.xml
  dev-release:
    name: development release
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    - name: Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v4
      with:
        dry_run: true
        branches: |
          [
            'main',
            {
              name: ${{ github.head_ref }},
              prerelease: true
            }
          ]
        extra_plugins: |
          @semantic-release/changelog
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
    - name: Output Release Version
      run: |
        echo "Pre-release version: ${{ steps.semantic.outputs.new_release_version }}"
