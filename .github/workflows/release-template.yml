name: 🚀 Release Package
on:
  workflow_call:
    inputs:
      blockPullRequestRelease:
        required: false
        type: boolean
        default: true
      blockReleaseCommit:
        required: false
        type: boolean
      dryRun:
        required: false
        type: boolean
    secrets:
      githubToken:
        required: true

jobs:
  retrieve-package-path:
    runs-on: ubuntu-latest
    outputs:
      packagePath: ${{ steps.extract-path.outputs.projectPath }}
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 📤 Extract Path
        id: extract-path
        run: |
          PACKAGE_PATH=$(jq -r '.plugins[] | select(type == "array" and .[0] == "@semantic-release/npm") | .[1].pkgRoot' .releaserc.json)
          echo "::set-output name=packagePath::$PACKAGE_PATH"

  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    # Removes the git plugin from semantic release so it doesn't generate a new commit
    - name: ✂️ Disable semantic release commit
      if: ${{ inputs.blockReleaseCommit == true }}
      run: |
        cat .releaserc.json | jq 'del(.plugins[] | select(type == "array" and .[0] == "@semantic-release/git"))' .releaserc.json > .releaserc.json.tmp && mv .releaserc.json.tmp .releaserc.json
    - name: 🚀 Semantic Release
      id: release
      uses: cycjimmy/semantic-release-action@v4
      with:
        dry_run: ${{ inputs.dryRun }}
        ci: ${{ inputs.blockPullRequestRelease }}
      env:
        GH_TOKEN: ${{ secrets.githubToken }}
    - name: 📄 Summary
      run: |
        if [ '${{ steps.release.outputs.new_release_published }}' == 'true' ] && [ '${{ inputs.dryRun }}' == 'false' ]; then
          echo "ℹ️ Released version \`${{ steps.release.outputs.new_release_version }}\`" | tee -a $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No version released" | tee -a $GITHUB_STEP_SUMMARY
        fi

  package-upm:
    runs-on: ubuntu-latest
    needs: [ 'semantic-release', 'retrieve-package-path' ]
    if: ${{ needs.semantic-release.outputs.new_release_published == 'true' && inputs.dryRun == false }}
    env:
      packagePath: ${{ needs.retrieve-package-path.outputs.packagePath }}
      releaseVersion: ${{ needs.semantic-release.outputs.new_release_version }}
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: ✏️ Update package.json
      run: |
        jq '.version = "${{ env.releaseVersion }}"' ${{ env.packagePath }}/package.json > package.json.tmp && mv package.json.tmp ${{ env.packagePath }}/package.json
    - name: 📦 Package UPM Branch
      id: package_upm
      run: |
        git config --global user.name 'semantic-release-bot'
        git config --global user.email 'semantic-release-bot@martynus.net'
        git commit -am "update package.json"
        git branch -d upm &> /dev/null || echo upm branch not found
        git subtree split -P "${{ env.packagePath }}" -b upm
        git checkout upm
        if [[ -d "Samples" ]]; then
          git mv Samples Samples~
          rm -f Samples.meta
          git commit -am "fix: Samples => Samples~"
        fi
        git push -f -u origin upm
    - name: 🏷️ Create UPM Tag
      run: |
        git tag $TAG upm
        git push origin --tags
      env:
        TAG: upm/${{ env.releaseVersion }}